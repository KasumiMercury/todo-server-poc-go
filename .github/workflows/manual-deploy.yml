name: manual-deploy.yml
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'
    
    env:
      GCP_SERVICE_NAME: todo-poc-cloud-run
      GCP_REGION: asia-northeast2
      ARTIFACT_REPO_ID: ${{ secrets.GCP_ARTIFACT_REPO_ID }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Authenticate to Google Cloud
        id: "auth"
        uses: "google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093" # v3.0.0
        with:
          token_format: access_token
          workload_identity_provider: "${{ secrets.GOOGLE_IAM_WORKLOAD_IDENTITY_POOL_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT_EMAIL }}"
      - name: Login to GAR
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.GCP_REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
      - name: Generate tag from GitHub SHA
        id: generate-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAG="manual-${SHORT_SHA}-$(date +%Y%m%d-%H%M%S)"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO_ID }}/todo-task
          tags: |
            type=raw,value=${{ steps.generate-tag.outputs.tag }}
            type=sha

      - name: Build and push container image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          sbom: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-to: type=gha
          cache-from: type=gha,mode=max

      - name: Display image reference
        run: |
          echo "Image pushed to: ${{ steps.meta.outputs.tags }}"
      - name: Generate SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@d8a2c0130026bf585de5c176ab8f7ce62d75bf04 # v0.20.7
        with:
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO_ID }}/todo-task:${{ steps.generate-tag.outputs.tag }}
          format: cyclonedx-json
          output-file: sbom-${{ steps.generate-tag.outputs.tag }}.cyclonedx.json
          artifact-name: sbom-${{ steps.generate-tag.outputs.tag }}.cyclonedx.json
