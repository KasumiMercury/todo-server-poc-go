// Code generated by MockGen. DO NOT EDIT.
// Source: token_validator.go
//
// Generated by this command:
//
//	mockgen -source=token_validator.go -destination=../../infra/auth/mocks/auth_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	auth "github.com/KasumiMercury/todo-server-poc-go/internal/domain/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenValidator is a mock of TokenValidator interface.
type MockTokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenValidatorMockRecorder
	isgomock struct{}
}

// MockTokenValidatorMockRecorder is the mock recorder for MockTokenValidator.
type MockTokenValidatorMockRecorder struct {
	mock *MockTokenValidator
}

// NewMockTokenValidator creates a new mock instance.
func NewMockTokenValidator(ctrl *gomock.Controller) *MockTokenValidator {
	mock := &MockTokenValidator{ctrl: ctrl}
	mock.recorder = &MockTokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenValidator) EXPECT() *MockTokenValidatorMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockTokenValidator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTokenValidatorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTokenValidator)(nil).Name))
}

// ValidateToken mocks base method.
func (m *MockTokenValidator) ValidateToken(tokenString string) *auth.TokenValidationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*auth.TokenValidationResult)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenValidatorMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenValidator)(nil).ValidateToken), tokenString)
}

// MockAuthenticationStrategy is a mock of AuthenticationStrategy interface.
type MockAuthenticationStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationStrategyMockRecorder
	isgomock struct{}
}

// MockAuthenticationStrategyMockRecorder is the mock recorder for MockAuthenticationStrategy.
type MockAuthenticationStrategyMockRecorder struct {
	mock *MockAuthenticationStrategy
}

// NewMockAuthenticationStrategy creates a new mock instance.
func NewMockAuthenticationStrategy(ctrl *gomock.Controller) *MockAuthenticationStrategy {
	mock := &MockAuthenticationStrategy{ctrl: ctrl}
	mock.recorder = &MockAuthenticationStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticationStrategy) EXPECT() *MockAuthenticationStrategyMockRecorder {
	return m.recorder
}

// IsConfigured mocks base method.
func (m *MockAuthenticationStrategy) IsConfigured() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConfigured")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfigured indicates an expected call of IsConfigured.
func (mr *MockAuthenticationStrategyMockRecorder) IsConfigured() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfigured", reflect.TypeOf((*MockAuthenticationStrategy)(nil).IsConfigured))
}

// Name mocks base method.
func (m *MockAuthenticationStrategy) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockAuthenticationStrategyMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockAuthenticationStrategy)(nil).Name))
}

// Priority mocks base method.
func (m *MockAuthenticationStrategy) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockAuthenticationStrategyMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockAuthenticationStrategy)(nil).Priority))
}

// ValidateToken mocks base method.
func (m *MockAuthenticationStrategy) ValidateToken(tokenString string) *auth.TokenValidationResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*auth.TokenValidationResult)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthenticationStrategyMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthenticationStrategy)(nil).ValidateToken), tokenString)
}
