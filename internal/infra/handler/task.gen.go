// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// Task defines model for task.
type Task struct {
	// Id The unique identifier for the task
	Id string `json:"id"`

	// Name The name of the task
	Name string `json:"name"`
}

// TaskCreate defines model for taskCreate.
type TaskCreate struct {
	// Name The name of the task
	Name string `json:"name"`
}

// TaskUpdate defines model for taskUpdate.
type TaskUpdate struct {
	// Name The name of the task
	Name *string `json:"name,omitempty"`
}

// TaskCreateTaskJSONRequestBody defines body for TaskCreateTask for application/json ContentType.
type TaskCreateTaskJSONRequestBody = TaskCreate

// TaskUpdateTaskJSONRequestBody defines body for TaskUpdateTask for application/json ContentType.
type TaskUpdateTaskJSONRequestBody = TaskUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	TaskGetAllTasks(c *gin.Context)
	// Create a new task
	// (POST /tasks)
	TaskCreateTask(c *gin.Context)
	// Delete a task
	// (DELETE /tasks/{taskId})
	TaskDeleteTask(c *gin.Context, taskId string)
	// Get a task
	// (GET /tasks/{taskId})
	TaskGetTask(c *gin.Context, taskId string)
	// Update a task
	// (PUT /tasks/{taskId})
	TaskUpdateTask(c *gin.Context, taskId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// TaskGetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) TaskGetAllTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskGetAllTasks(c)
}

// TaskCreateTask operation middleware
func (siw *ServerInterfaceWrapper) TaskCreateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskCreateTask(c)
}

// TaskDeleteTask operation middleware
func (siw *ServerInterfaceWrapper) TaskDeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskDeleteTask(c, taskId)
}

// TaskGetTask operation middleware
func (siw *ServerInterfaceWrapper) TaskGetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskGetTask(c, taskId)
}

// TaskUpdateTask operation middleware
func (siw *ServerInterfaceWrapper) TaskUpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskUpdateTask(c, taskId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tasks", wrapper.TaskGetAllTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.TaskCreateTask)
	router.DELETE(options.BaseURL+"/tasks/:taskId", wrapper.TaskDeleteTask)
	router.GET(options.BaseURL+"/tasks/:taskId", wrapper.TaskGetTask)
	router.PUT(options.BaseURL+"/tasks/:taskId", wrapper.TaskUpdateTask)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWz2vzOBD9V8TsHk3itikU39LtUgI9LLR7WnLQWpNEXVlSpXG6ofh//5DkNL/s8H0l",
	"KYWeLCxp5s3Tmye9QWkqazRq8lC8gS8XWPE4ROeMCwPrjEVHEuPv0ggMX4G+dNKSNBoK+DMsZnEuA/yf",
	"V1YhFKN8lAGtLEIBUhPO0UGTgUDiUvnDKGMhZBhyxWJ2tl65FROeFsiI+//Yq6QFm9yxi8ur0TV75Z5p",
	"Q2xmai3gPa0nJ/U8ZK3Qez7vxb6e3kkV0hwJ2mTg8KWWDgUU/0Bb/jrS9H29+fcZSwogAvBDTqU4RBXK",
	"rLV8qZFJgZrkTKJjM+MYtQTsQI0kdJWteYXd0cMMM7PueI9xwJ7S/+N1y0BNzNNX8h8OOeFh4Z8A7iiu",
	"v604Ja4UTvQD2wMRfkk9Mx2pgvIe0S3RsfFfkxBM0kaTOzNLdD7tuhjkgzzUZixqbiUUcDXIB1eQgeW0",
	"iKUNA+o4miOFT6ibh7QT0Ya/Rxor9RTXBTK9NdonYi7zPJmAJtRxO7dWyTIGGD77AGPtIlHZhFXc+LvD",
	"GRTw23DjN8PWbCIi2LDDneOrRM4uKQ/SU+Q+ImsyuP5FNMdAJLvryDrRhC5Ykk+krxdm4Ouq4m4FBdwj",
	"Ma5Uiyxoa+6D+GJl0yYDa3wP2ak1WsUE4aKnWyNWJytsq/+a3eYgV2NzcMAXJ83cxWiUcBkhCebrskTv",
	"Z7VSq3Cmo88401suWMv1l9JROifGmcbXtb3saanJ2hYevoXPRDTJPRQmIztU2F2caxVmueMVEroQs8vg",
	"Jnfb9sbIsDZ2sCooopGs7b6ABAH2VZVtkbXvgtMDxY16/C8l7pLI6PzHtXf3fyWVpANlvEch2VFn/7gO",
	"HJKTuDynEvKze884lbN5Bnx3McWrq1dJtu5RUnrqfFxMdXp5nVRK57k72zfiT92d+efcnXX7zvwKd+d3",
	"758kj94Wiovj7q7eeDAlV0zgEpWxFWpqM0EGtVNQwILIFsOhCusWxlNxk9/k0EybHwEAAP//6s+E0rkP",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
