// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for HealthComponentStatus.
const (
	HealthComponentStatusDOWN HealthComponentStatus = "DOWN"
	HealthComponentStatusUP   HealthComponentStatus = "UP"
)

// Defines values for HealthStatusStatus.
const (
	HealthStatusStatusDOWN HealthStatusStatus = "DOWN"
	HealthStatusStatusUP   HealthStatusStatus = "UP"
)

// Error defines model for error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// HealthComponent defines model for healthComponent.
type HealthComponent struct {
	// Details Additional component details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Status Component health status
	Status HealthComponentStatus `json:"status"`
}

// HealthComponentStatus Component health status
type HealthComponentStatus string

// HealthStatus defines model for healthStatus.
type HealthStatus struct {
	// Components Health status of individual components
	Components struct {
		Database *HealthComponent `json:"database,omitempty"`
	} `json:"components"`

	// Status Overall application health status
	Status HealthStatusStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatusStatus Overall application health status
type HealthStatusStatus string

// Task defines model for task.
type Task struct {
	// Id The unique identifier for the task
	Id string `json:"id"`

	// Title The title of the task
	Title string `json:"title"`
}

// TaskCreate defines model for taskCreate.
type TaskCreate struct {
	// Title The title of the task
	Title string `json:"title"`
}

// TaskUpdate defines model for taskUpdate.
type TaskUpdate struct {
	// Title The title of the task
	Title *string `json:"title,omitempty"`
}

// TaskCreateTaskJSONRequestBody defines body for TaskCreateTask for application/json ContentType.
type TaskCreateTaskJSONRequestBody = TaskCreate

// TaskUpdateTaskJSONRequestBody defines body for TaskUpdateTask for application/json ContentType.
type TaskUpdateTaskJSONRequestBody = TaskUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get application health status
	// (GET /health)
	HealthGetHealth(ctx echo.Context) error
	// Get all tasks
	// (GET /tasks)
	TaskGetAllTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	TaskCreateTask(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{taskId})
	TaskDeleteTask(ctx echo.Context, taskId string) error
	// Get a task
	// (GET /tasks/{taskId})
	TaskGetTask(ctx echo.Context, taskId string) error
	// Update a task
	// (PUT /tasks/{taskId})
	TaskUpdateTask(ctx echo.Context, taskId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthGetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) HealthGetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthGetHealth(ctx)
	return err
}

// TaskGetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) TaskGetAllTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskGetAllTasks(ctx)
	return err
}

// TaskCreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskCreateTask(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskCreateTask(ctx)
	return err
}

// TaskDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskDeleteTask(ctx, taskId)
	return err
}

// TaskGetTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskGetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskGetTask(ctx, taskId)
	return err
}

// TaskUpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskUpdateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskUpdateTask(ctx, taskId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.HealthGetHealth)
	router.GET(baseURL+"/tasks", wrapper.TaskGetAllTasks)
	router.POST(baseURL+"/tasks", wrapper.TaskCreateTask)
	router.DELETE(baseURL+"/tasks/:taskId", wrapper.TaskDeleteTask)
	router.GET(baseURL+"/tasks/:taskId", wrapper.TaskGetTask)
	router.PUT(baseURL+"/tasks/:taskId", wrapper.TaskUpdateTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXU/jRhT9K6PbPhriQCKt/MZCS6lQl5aglYryMNg3ySz2jJmPtCnyf6/mw4kTO1lA",
	"gW21PMWxJ3fOPffMudd5hFQUpeDItYLkEVQ6w4K6S5RSSHtRSlGi1Azd7VRkaD8zVKlkpWaCQwI/2cXE",
	"PYsA/6ZFmSMkgziOQC9KhAQY1zhFCVUEGWrKctWOcpJlzF7SnLjdSb2yERMu+JzmLCOMl0aTkkpaoEZp",
	"F4WtlJaMT+1OBSpFp1vx1o+b4T/SjPyBDwaVbkesIpD4YJjEDJJbCPnWYcbL9eLuC6baIpghzfXstCa5",
	"zedTyFjWqIsQWxLOMQ0/uxJKTyVe/34JFqwqBVc4YoWFNSyUxdQCqTTVpgPCEjbxaZCwMALkprAM3FxB",
	"BGefPv9mk1+R6G7v5i6E2s7Z9RLUpgCbgl0H/EsTJhETwnjG5iwzTRIt/o0aUE3vqHJk/ihxAgn80Fut",
	"74VT0dssZvUcMj/NUdI8J7Qsc5ZSe3cftEagWYFK06Js7zmqH1ku9AzrDdMZpvdrsj+KjwYHcf+gPxz1",
	"4+Q4TuL4T4hgImRBNSSWIjywOz21sE1cUbNoXRXXVN23K82yjoxmSAxnDwYJy5BrNmEoyURIl56L00yr",
	"f3Q8GHaTpnPsDu8e1YS1Il67CzLy93dTwTKod9qW9alEqrGd+5vg2w3tpsz2C80HzLZj24BhDxOmRjK9",
	"uLYn0G9/h1SiPDF6tvr2cy3TXz+PIPJdzEbyT1d7zbQuobKBGZ+IjhyouifXKOcoycnVxbJ6XU/mKJX/",
	"Vf8wPowta6JETksGCRwfxofH1meonjnUwTvs5RRdG7CUOhe4yJbOdY7aXzS82/38KI6D0+vQRRo20vui",
	"LI7H9Z6w5pINg2s0nOc2jtrarBFVG9/XfKjbTqpQGfo0nw0NwJVrozU2LJSpYGoLG3/4fJ7sODO0g8qS",
	"mLqNOJckCuWcpdZ16JyynN7lzZ5v5xGN0nbpoA43Wjw9Vz9mdSS5jKt8XKzjDuPjV9BCGPfgdKkJInFi",
	"FGZrlXdNqWrd+YbVN3xZ/4ZhQHI7jkCZoqByAQmco97ZeTWdKmuJ4ZiObayedTC19chaSzhHfZLnI7fu",
	"RUd2RQnTWKivceM8deWUVEq66OLokintfNghqyIYxP1noXmRZG84NXomJPvHq2b4TAr2eU7WtbDeNm7H",
	"VVsceR7YWonBsT2uIiiF2iIA379DR5P+veGjyBZ7y7sxJFTr/VtLg1VLdP297txFuGuFqYOUEWXSFJWa",
	"mDxfeJ29QcntO1rg+l3bX9G21w6hhONf9Ui2oe+l1fUe7cdFVvnekKMf/9qqP3PPguobr+AWTHsqvDhr",
	"joRECxJi2zEMEjckQQSculnDQ4BNpTe7x+bkOG6dgsGW2c5v3CXbbyChgYf5upu6tLnQZCIM/18p14uM",
	"0C2qjXZ25ZdrU6KWDOevqc741T36xKezeqF7F/h/dOzYqu7SbFG3f41+ucCNf6/fq7xfZ+4J/0A8ae6J",
	"32buMeE/jO927nk/0zvPtJfs1mPtY9ngXef1UqQ0JxnOMRdlgVwHIBCBkXn4/yrp9XK7biaUTj7EH2Ko",
	"xtW/AQAA//8YlsTwyBkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
