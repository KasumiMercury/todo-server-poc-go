// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for HealthComponentStatus.
const (
	HealthComponentStatusDOWN HealthComponentStatus = "DOWN"
	HealthComponentStatusUP   HealthComponentStatus = "UP"
)

// Defines values for HealthStatusStatus.
const (
	HealthStatusStatusDOWN HealthStatusStatus = "DOWN"
	HealthStatusStatusUP   HealthStatusStatus = "UP"
)

// ErrorResponse defines model for errorResponse.
type ErrorResponse struct {
	// Code Error code
	Code int `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// HealthComponent defines model for healthComponent.
type HealthComponent struct {
	// Details Additional component details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Status Component health status
	Status HealthComponentStatus `json:"status"`
}

// HealthComponentStatus Component health status
type HealthComponentStatus string

// HealthStatus defines model for healthStatus.
type HealthStatus struct {
	// Components Health status of individual components
	Components struct {
		Database *HealthComponent `json:"database,omitempty"`
	} `json:"components"`

	// Status Overall application health status
	Status HealthStatusStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatusStatus Overall application health status
type HealthStatusStatus string

// Task defines model for task.
type Task struct {
	// Id The unique identifier for the task
	Id openapi_types.UUID `json:"id"`

	// Title The title of the task
	Title string `json:"title"`
}

// TaskCreate defines model for taskCreate.
type TaskCreate struct {
	// Title The title of the task
	Title string `json:"title"`
}

// TaskUpdate defines model for taskUpdate.
type TaskUpdate struct {
	// Title The title of the task
	Title *string `json:"title,omitempty"`
}

// TaskCreateTaskJSONRequestBody defines body for TaskCreateTask for application/json ContentType.
type TaskCreateTaskJSONRequestBody = TaskCreate

// TaskUpdateTaskJSONRequestBody defines body for TaskUpdateTask for application/json ContentType.
type TaskUpdateTaskJSONRequestBody = TaskUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get application health status
	// (GET /health)
	HealthGetHealth(ctx echo.Context) error
	// Get all tasks
	// (GET /tasks)
	TaskGetAllTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	TaskCreateTask(ctx echo.Context) error
	// Delete a task
	// (DELETE /tasks/{taskId})
	TaskDeleteTask(ctx echo.Context, taskId openapi_types.UUID) error
	// Get a task
	// (GET /tasks/{taskId})
	TaskGetTask(ctx echo.Context, taskId openapi_types.UUID) error
	// Update a task
	// (PUT /tasks/{taskId})
	TaskUpdateTask(ctx echo.Context, taskId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HealthGetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) HealthGetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HealthGetHealth(ctx)
	return err
}

// TaskGetAllTasks converts echo context to params.
func (w *ServerInterfaceWrapper) TaskGetAllTasks(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskGetAllTasks(ctx)
	return err
}

// TaskCreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskCreateTask(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskCreateTask(ctx)
	return err
}

// TaskDeleteTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskDeleteTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskDeleteTask(ctx, taskId)
	return err
}

// TaskGetTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskGetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskGetTask(ctx, taskId)
	return err
}

// TaskUpdateTask converts echo context to params.
func (w *ServerInterfaceWrapper) TaskUpdateTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "taskId" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", ctx.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter taskId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TaskUpdateTask(ctx, taskId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.HealthGetHealth)
	router.GET(baseURL+"/tasks", wrapper.TaskGetAllTasks)
	router.POST(baseURL+"/tasks", wrapper.TaskCreateTask)
	router.DELETE(baseURL+"/tasks/:taskId", wrapper.TaskDeleteTask)
	router.GET(baseURL+"/tasks/:taskId", wrapper.TaskGetTask)
	router.PUT(baseURL+"/tasks/:taskId", wrapper.TaskUpdateTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ32/bNhD+Vwhuj3IsO3br6i1tui5D0GaNgwIr8nAWTzYbiVJJyqsX6H8fSEo2bcup",
	"kzktkOUpiigdv/vxfXeUb2mcZ0UuUGhFo1uq4hlmYC9Rylx+RFXkQqG5Uci8QKk52uU4Z/YuQxVLXmie",
	"CxrRt+YlYtcCit8gK1Kk0SAMA6oXBdKIcqFxipJWAWWogadq28oJY9xcQkosCtI86dmkZ2IOKWeEi6LU",
	"pAAJGWqU5qF6K6UlF1OzU4ZKwXQn3mbZN/8aGPmIX0tUettiFVCJX0sukdHoM639bcxcL5/PJ18w1gbB",
	"DCHVszdNsLfj6QUDlu5feI9oWWKwO1DLPLYFy6RLCIzr1y5ypacSL/88p8YRl+IxzwzkYaYM3i0HlAZd",
	"tuRq6RJxLpL6wYCiKDMTnasLGtDTD5/em8CsAmxv3x3X2tTueF4uQW0Wp1/U64B/92GSPCFcMD7nrPSD",
	"aPBv5Ac0TMAx4VeJCY3oL93V892aOd3NRFf3CeaHOUpIUwJFkfIYzN1DhDWgmmeoNGTF9p7jZsnEQs+w",
	"2TCeYXyzRol+2B90wl6nNxz3wug4jMLwLxrQJJcZaBqZEGHH7LRvYn1cgZ+0toxrUDfbmeasxaMZklLw",
	"ryUSzlBonnCUJMmldc/a8d1ioyF7kfQnndFLYJ1eLwk7MIGk87KPr3rAesM+hL6bZclZe4x1iu1o7FIT",
	"3y0Al/aCjN39DL6do5jqGY36w+H3Iumg2J13Be2NRNAtCv5T8N4N9apgh4XqDLL9sW7AMlzFuJRcLy4N",
	"wR2cCYJEeVIaO81/vzXl8cenMQ1cIzWW3OqqXmZaF7QyhrlI8hafQN2QS5RzlOTk4myZ3baVOUrl3uod",
	"hUehiWJeoICC04geH4VHx0bGQM8s6lqazOUUbQcyIbYic8aWwvgOtbvwWoN9vR+GdSPRdQPzVKr7RRkc",
	"t+stZ02EPf30et19+1KjnEbnqo3/12SuXa2qOjOwn4zX/cWma6PzegrNVa2ZC2N/eP84mUlqaGakZWCa",
	"LmVFmCiUcx4bUYM58BQmqT9umFFIozRDQF0ddqrZ39f1Sa/F2aV95exjY38YHj9CTTjzZrRoaoNITEqF",
	"bK0CbO+rtu78xCooxbIOPOGg0efrgKoyy0AuaETfob6zwWuYKiOVNV2vja2uUTa1k7pGGt6hPknTsX3u",
	"v1DXpSAr9GLc7LnC/j63GquIX4hzSEs0XlZGernSXExb3n1bLzkL3nuui+/bhxs59LoQ6dEqqK28GCWj",
	"BBh2Ri8RnZVXeAwdZDGb9IbxYMiOd1jp08oGe1UbXGOmvlcktumsWgdICYu2YjnnSttGZd2vAjoIew9R",
	"ikHY85XiSqEkZ6dE5JokeSnMiYjo/AbFmkZcCSj1LJf8n5pGh5GGTbOHUb9GGMiqPZAEeIqsXfc2delx",
	"dW+d2+vjwOfrapvsabqs+YbctmgMYYpc7SC0m9vqyUW6o+jrnC32iO9+/nvDYbU+p5mzZrUlIr2D7twW",
	"cEvD2EJiRJVxjEolZZouHF3Ch9FlrbTcvJhwTJmR7MZnAoKRGIRh0QSJ1b+1WnsNjNRJOGCFbVh9VoSn",
	"rwiOcQSIwL+bA8uGKiwbfvfW/DljlZuQUnSHo22tOLVrtVZ438IMmO0z09mpf2AiOie1bXMooZE9MtCA",
	"CrCTt4NAN/XBj+l3zsYmABtaMthx8nFA2sj/zIynzgxXxAR2sCK4c/Z9eO1L1JLj/EdWf/jonfTEubf6",
	"vPIUCTRwMnJ/nwY+WKs7S4cOCHfb8DPjW6bjnXQvyh10d1/1Hs740n1mfFS+P864Xn8g3WtcD3/MuF7W",
	"n1gfaVy3KbMzez2d47cYkZH+cEjiGUiI6x/9nkf1Zz39v+upk4edkupsGeNtWnmex5AShnNM8yJDoWsg",
	"NKClTOufLqJuNzXPzXKlo1E4Cml1Xf0bAAD//2KVIkZGIAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
