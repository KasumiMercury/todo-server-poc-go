// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for HealthComponentStatus.
const (
	HealthComponentStatusDOWN HealthComponentStatus = "DOWN"
	HealthComponentStatusUP   HealthComponentStatus = "UP"
)

// Defines values for HealthStatusStatus.
const (
	HealthStatusStatusDOWN HealthStatusStatus = "DOWN"
	HealthStatusStatusUP   HealthStatusStatus = "UP"
)

// Error defines model for error.
type Error struct {
	// Code Error code
	Code int `json:"code"`

	// Details Additional error details
	Details *string `json:"details,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// HealthComponent defines model for healthComponent.
type HealthComponent struct {
	// Details Additional component details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Status Component health status
	Status HealthComponentStatus `json:"status"`
}

// HealthComponentStatus Component health status
type HealthComponentStatus string

// HealthStatus defines model for healthStatus.
type HealthStatus struct {
	// Components Health status of individual components
	Components struct {
		Database *HealthComponent `json:"database,omitempty"`
	} `json:"components"`

	// Status Overall application health status
	Status HealthStatusStatus `json:"status"`

	// Timestamp Timestamp of the health check
	Timestamp time.Time `json:"timestamp"`
}

// HealthStatusStatus Overall application health status
type HealthStatusStatus string

// Task defines model for task.
type Task struct {
	// Id The unique identifier for the task
	Id string `json:"id"`

	// Name The name of the task
	Name string `json:"name"`
}

// TaskCreate defines model for taskCreate.
type TaskCreate struct {
	// Name The name of the task
	Name string `json:"name"`
}

// TaskUpdate defines model for taskUpdate.
type TaskUpdate struct {
	// Name The name of the task
	Name *string `json:"name,omitempty"`
}

// TaskCreateTaskJSONRequestBody defines body for TaskCreateTask for application/json ContentType.
type TaskCreateTaskJSONRequestBody = TaskCreate

// TaskUpdateTaskJSONRequestBody defines body for TaskUpdateTask for application/json ContentType.
type TaskUpdateTaskJSONRequestBody = TaskUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get application health status
	// (GET /health)
	HealthGetHealth(c *gin.Context)
	// Get all tasks
	// (GET /tasks)
	TaskGetAllTasks(c *gin.Context)
	// Create a new task
	// (POST /tasks)
	TaskCreateTask(c *gin.Context)
	// Delete a task
	// (DELETE /tasks/{taskId})
	TaskDeleteTask(c *gin.Context, taskId string)
	// Get a task
	// (GET /tasks/{taskId})
	TaskGetTask(c *gin.Context, taskId string)
	// Update a task
	// (PUT /tasks/{taskId})
	TaskUpdateTask(c *gin.Context, taskId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HealthGetHealth operation middleware
func (siw *ServerInterfaceWrapper) HealthGetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthGetHealth(c)
}

// TaskGetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) TaskGetAllTasks(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskGetAllTasks(c)
}

// TaskCreateTask operation middleware
func (siw *ServerInterfaceWrapper) TaskCreateTask(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskCreateTask(c)
}

// TaskDeleteTask operation middleware
func (siw *ServerInterfaceWrapper) TaskDeleteTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskDeleteTask(c, taskId)
}

// TaskGetTask operation middleware
func (siw *ServerInterfaceWrapper) TaskGetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskGetTask(c, taskId)
}

// TaskUpdateTask operation middleware
func (siw *ServerInterfaceWrapper) TaskUpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Param("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TaskUpdateTask(c, taskId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.HealthGetHealth)
	router.GET(options.BaseURL+"/tasks", wrapper.TaskGetAllTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.TaskCreateTask)
	router.DELETE(options.BaseURL+"/tasks/:taskId", wrapper.TaskDeleteTask)
	router.GET(options.BaseURL+"/tasks/:taskId", wrapper.TaskGetTask)
	router.PUT(options.BaseURL+"/tasks/:taskId", wrapper.TaskUpdateTask)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY30/jRhD+V1bbPhriQCKd/MZBS6lQj5agk4rysNiTZA971+yPtCny/17N7jpxYicH",
	"KHCtjqc49mb2m2++/WacR5rKopQChNE0eaQ6nUHB3CUoJRVelEqWoAwHdzuVGeBnBjpVvDRcCprQn3Ax",
	"cc8iCn+zosyBJoM4jqhZlEATyoWBKShaRTQDw3iu21FOsozjJcuJ253UKxsx6YWYs5xnhIvSGlIyxQow",
	"oHBR2EobxcUUdypAazbdird+3Az/kWXkD3iwoE07YhVRBQ+WK8hocktDvnWY8XK9vPsCqUEEM2C5mZ3W",
	"JLf5fAoZyxp1EYIlEQLS8LMrqc1UwfXvlxTB6lIKDSNeIKxhoRFTC6Q2zNgOCEvYxKdBwsKIgrAFMnBz",
	"RSN69unzb5j8ikR3ezd3IdR2zq6XoDYF2BTsOuBfmjCJnBAuMj7nmW2SiPg3asAMu2PakfmjgglN6A+9",
	"1fpeOBW9zWJWzyHz0xwUy3PCyjLnKcO7+6A1ooYXoA0ryvaeo/oRcmFmUG+YziC9X5P9UXw0OIj7B/3h",
	"qB8nx3ESx3/SiE6kKpihCVIEB7jTUwvbxBU1i9ZVccP0fbvSPOvIaAbECv5ggfAMhOETDopMpHLpuTjN",
	"tPpHx4NhF2mCFdAdHZ/UdLXiXbsLMvL3dxPBMxr22ZbyqQJmoJ34G4DbieumzPaJy4fLtgPbAIGHCFKr",
	"uFlc48nzm98BU6BOrJmtvv1cy/PXzyMa+e6FkfzT1V4zY0paYWAuJrIjBabvyTWoOShycnXhxGsc9vaT",
	"OSjtf9U/jA9j5EyWIFjJaUKPD+PDY/QXZmYOdfAMvJyCs38k1J3+i2zpWOdg/EXDs93Pj+I4OLwJ3aNh",
	"H70vGnE8rveCNXdsGFuj0Ty3YdSWhgZUbXxf859uG6lCZdjT/DUYvyvXRktsWCfXwcwWGH/4fJ5wjBni",
	"gLIkpm4fzh2JBjXnKboNmzOes7u82etxDjGgsDsHdbiR4um5+vGqI8llXO3jQh13GB+/ghbCmEdPl5og",
	"CiZWQ7ZWedeMqtadb1h9K5b1bxgGTW7HEdW2KJha0ISeg9nZcQ2bavTDcEzHGKuHDqa3Hlm0hHMwJ3k+",
	"cutedGRXlHADhf4aN85TV07JlGKLLo4uuTbOhx2yKqKDuP8sNC+S7I1g1syk4v941QyfScE+z8m6Ftbb",
	"xu24aosjzwNbKzE4tsdVREuptwjAt+7Q0ZR/X/gos8Xe8m7MB9V68zbKQtUSXX+vO3cR7lph6iBlRNs0",
	"Ba0nNs8XXmdvUHJ8Nwtcv2v7K9r22iGMCPirHsk29L20ut4jflxkle8NOfjhr636M/csqL7x6o1g2kPh",
	"xVlzJCRGkhAbxzCauCGpHpET6iHQTaU3u8fm5DhunYLBltnOb9wl228goYGH+bqburSFNGQirfhfKdeL",
	"jLAtqo12duWXa1OBURzmr6nO+NU9+sSns3qdexf4f3Ts2Kru0m5Rt3+NfrnArX+r36u8X2fuCf8/PGnu",
	"id9m7rHhP4zvdu55P9M7z7SX7NZj7WNh8K7zeilTlpMM5pDLsgBhAhAaUavy8P9V0uvluG4mtUk+xB9i",
	"Wo2rfwMAAP//2duNE8AZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
